# Get working directory
getwd()
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Load data from World Bank API
wb <- wb_data(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
View(wb)
# Reshape data from long to wide (put rows in columns)
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID", # New columns
idvar = c("country","date","iso3c"), # Identifiers for rows
direction = "wide")
View(wb_re)
View(wb_re)
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# Rename columns
names(df)
View(qog)
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # Merge variables in left
by.y=c("year","ccodealp"), # Merge variables in right
all.x=TRUE, # Merge operation, only keep left
sort=FALSE) # Do not sort observations
names(df)
names(df)[4] <- "gdp_per_cap"
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
View(df)
View(df)
View(qog)
# Save df
write.csv(df, "datasets/df_income_mortality.csv")
# Save df
write.csv(df, "datasets/df_income_mortality.csv")
# Save df
write.csv(df, "datasets/df_income_mortality.csv")
# Save df
write.csv(df, "datasets/df_income_mortality.csv")
# Applied Statistical Analysis I
# Tutorial 5: Bivariate regression
# Get working directory
getwd()
# Set working directory
setwd("/Users/danzhang/Documents/GitHub/StatsI_Fall2023/tutorials/05")
getwd()
# Agenda
# (a.) Gathering data
# (b.) Data wrangling
# (c.) Descriptive analysis
# (d.) Regression analysis
# Research questions:
# Is there a relationship between income and child mortality?
# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(wbstats)){
install.packages("wbstats")
library(wbstats)}
if(!require(tidyverse)){
install.packages("tidyverse")
library(tidyverse)}
if(!require(ggplot2)){
install.packages("ggplot2")
library(ggplot2)}
if(!require(stargazer)){
install.packages("stargazer")
library(stargazer)}
# (a.) Gathering data ----------
# What is an API?
# https://medium.com/geekculture/a-beginners-guide-to-apis-9aa7b1b2e172
# Load data from World Bank API
wb <- wb(country=c("AF","BRA","ITA","NGA","SWE","UGA"),
indicator=c("NY.GDP.PCAP.CD", # GDP per capita (current US$)
"SP.POP.TOTL", # Population, total
"SE.SEC.ENRR", #  School enrollment, secondary (% gross)
"SH.DYN.MORT"), # Mortality rate, under-5 (per 1,000 live births)
startdate = 2000, enddate = 2020)
# Data formats--Wide and long
# https://www.statology.org/long-vs-wide-data/
# Reshape data from long to wide (put rows in columns)
wb_re <- reshape(wb[, c("country","iso3c","date","indicatorID","value")], # df
timevar = "indicatorID", # New columns
idvar = c("country","date","iso3c"), # Identifiers for rows
direction = "wide")
# Load Quality of Government data
qog <- read_csv("https://www.qogdata.pol.gu.se/data/qog_bas_ts_jan23.csv")
# How can we combine data from different sources?
# https://guides.nyu.edu/quant/merge
# Merge
df <- merge(wb_re, # Left df
qog[, c("ccodealp","year","bmr_dem")], # Right df
by.x=c("date","iso3c"), # Merge variables in left
by.y=c("year","ccodealp"), # Merge variables in right
all.x=TRUE, # Merge operation, only keep left
sort=FALSE) # Do not sort observations
# Rename columns
names(df)
names(df)[4] <- "gdp_per_cap"
names(df)[5] <- "pop_size"
names(df)[6] <- "sec_enrol"
names(df)[7] <- "mort"
names(df)[8] <- "democracy"
View(df)
# Save df
write.csv(df, "datasets/df_income_mortality.csv")
# Load df
df <- read_csv("datasets/df_income_mortality.csv")
# Save df
write.csv(df,"datasets/df_income_mortality.csv")
data <- data.frame(
Category = c("Category A", "Category A", "Category B", "Category B"),
Outcome = c("Success", "Failure", "Success", "Failure"),
Frequency = c(25, 15, 35, 10)
)
# 显示数据框
print(data)
# 手动输入二维频数表
table_data <- matrix(c(25, 15, 35, 10), nrow = 2, byrow = TRUE)
colnames(table_data) <- c("Success", "Failure")
rownames(table_data) <- c("Category A", "Category B")
# 转换为数据框
data <- as.data.frame(table_data)
# 添加列名
colnames(data) <- c("Success", "Failure")
# 显示数据框
print(data)
table_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(table_data)<-c("Not Stoppped","Bribe requested","Stopped/given warning")
rownames(table_data)<-cc("Upper class","Lower class")
table_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(table_data)<-c("Not Stoppped","Bribe requested","Stopped/given warning")
rownames(table_data)<-c("Upper class","Lower class")
resulting_data<-as.data.frame(table_data)
View(resulting_data)
resulting_data$Row_sum<-rowSums(resulting_data)
resulting_data$Col_sum<-colSums(resulting_data)
View(resulting_data)
resulting_data<-rbind(resulting_data,Col_sum)
resulting_data$Row_sum<-rowSums(resulting_data)
Col_sum<-colSums(resulting_data)
resulting_data<-rbind(resulting_data,Col_sum)
View(resulting_data)
resulting_data$Row_total<-rowSums(resulting_data)
Col_sum<-data.frame("Col_total",colSums(resulting_data))
resulting_data<-rbind(resulting_data,Col_sum)
resulting_data<-rbind(resulting_data,Col_sum)
resulting_data$Row_total<-rowSums(resulting_data)
resulting_data$Col_total<-NULL
View(resulting_data)
resulting_data$Col_total<-rbind(data.frame(row.names = "Col_total",))
table_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(table_data)<-c("Not Stoppped","Bribe requested","Stopped/given warning")
rownames(table_data)<-c("Upper class","Lower class")
resulting_data<-as.data.frame(table_data)
#calculate the sum of rows and column
resulting_data["Col_total",]<-colSums(resulting_data)
resulting_data$Row_total<-rowSums(resulting_data)
View(resulting_data)
table_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(table_data)<-c("Not Stoppped","Bribe requested","Stopped/given warning")
rownames(table_data)<-c("Upper class","Lower class")
resulting_data<-as.data.frame(table_data)
#calculate the sum of rows and column
View(resulting_data)
View(table_data)
table_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(table_data)<-c("Not Stoppped","Bribe requested","Stopped/given warning")
rownames(table_data)<-c("Upper class","Lower class")
resulting_data<-as.data.frame(table_data)
#calculate the sum of rows and column
#calculate the expected frequencies
calculate_expected_freq<-function(data_table){
#calculate the sum of rows and columns of the data table
total_samples<-sum(data_table)
row_sums<-rowSums(data_table)
col_sums<-colSums(data_table)
#calculate the frequencies
expected_freq<-outer(row_sums,col_sums)/total_samples
return(expected_freq)
}
#calculate Chi square statistic
chi_square_statistic<-sum(sqrt(resulting_data - calculate_expexted_freq(resulting_data))/calculate_expected_freq)
cat("Degree of freedom: ",df,"\n")
cat("Degree of freedom: ",degree_of_freedom,"\n")
table_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(table_data)<-c("Not Stoppped","Bribe requested","Stopped/given warning")
rownames(table_data)<-c("Upper class","Lower class")
resulting_data<-as.data.frame(table_data)
#calculate the sum of rows and column
#calculate the expected frequencies
calculate_expected_freq<-function(data_table){
#calculate the sum of rows and columns of the data table
total_samples<-sum(data_table)
row_sums<-rowSums(data_table)
col_sums<-colSums(data_table)
#calculate the frequencies
expected_freq<-outer(row_sums,col_sums)/total_samples
return(expected_freq)
}
#calculate Chi square statistic
chi_square_statistic<-sum(sqrt(resulting_data - calculate_expected_freq(resulting_data))/calculate_expected_freq)
View(calculate_expected_freq)
View(resulting_data)
View(table_data)
table_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(table_data)<-c("Not Stopped","Bribe requested","Stopped/given warning")
rownames(table_data)<-c("Upper class","Lower class")
#convert the table to dataframe
resulting_data<-as.data.frame(table_data)
#calculate the expected frequencies
calculate_expected_freq<-function(data_table){
#calculate the sum of rows and columns of the data table
total_samples<-sum(data_table)
row_sums<-rowSums(data_table)
col_sums<-colSums(data_table)
#calculate the frequencies
expected_freq<-outer(row_sums,col_sums)/total_samples
return(expected_freq)
}
#calculate Chi square statistic
chi_square_statistic<-sum((resulting_data - calculate_expected_freq(resulting_data))^2/calculate_expected_freq)
table_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(table_data)<-c("Not Stopped","Bribe requested","Stopped/given warning")
rownames(table_data)<-c("Upper class","Lower class")
#convert the table to dataframe
#resulting_data<-as.data.frame(table_data)
#calculate the expected frequencies
calculate_expected_freq<-function(data_table){
#calculate the sum of rows and columns of the data table
total_samples<-sum(data_table)
row_sums<-rowSums(data_table)
col_sums<-colSums(data_table)
#calculate the frequencies
expected_freq<-outer(row_sums,col_sums)/total_samples
return(expected_freq)
}
#calculate Chi square statistic
chi_square_statistic<-sum((resulting_data - calculate_expected_freq(resulting_data))^2/calculate_expected_freq)
#create the resulting data table
resulting_data<-matrix(c(14,6,7,7,7,1),nrow = 2,byrow = TRUE)
colnames(resulting_data)<-c("Not Stopped","Bribe requested","Stopped/given warning")
rownames(resulting_data)<-c("Upper class","Lower class")
#convert the table to dataframe
#resulting_data<-as.data.frame(table_data)
#calculate the expected frequencies
calculate_expected_freq<-function(data_table){
#calculate the sum of rows and columns of the data table
total_samples<-sum(data_table)
row_sums<-rowSums(data_table)
col_sums<-colSums(data_table)
#calculate the frequencies
expected_freq<-outer(row_sums,col_sums)/total_samples
return(expected_freq)
}
#calculate Chi square statistic
chi_square_statistic<-sum((resulting_data - calculate_expected_freq(resulting_data))^2/calculate_expected_freq)
source("~/Documents/GitHub/StatsI_Fall2023/problemSets/PS02/my_answers/P02.R", echo=TRUE)
source("~/Documents/GitHub/StatsI_Fall2023/problemSets/PS02/my_answers/P02.R", echo=TRUE)
chisq_result<-chisq.test(rsulting_data)
chisq_result<-chisq.test(resulting_data)
chisq_result
p_value<-pchisq(chi_square_statistic,degree_of_freedom,lower.tail = F)
p_value
## Q1-b ##
alpha<-0.1
p_value<-pchisq(chi_square_statistic,degree_of_freedom,lower.tail = F)
p_value
if (p_value<alpha){
cat("P-Value is approximately equal to :",round(p_value,2),"<",alpha,"Based on the chi-square test,
we reject the null hypothesis indicating that there is a statistically significant dependence between
driver class and whether officers were more or less likely to solicit a bribe from drivers.")
}else if (p_value<alpha) {
cat("P-Value is approximately equal to :",round(p_value,2),">",alpha,"Based on the chi-square test,
we cannot reject the null hypothesis. Which indicates that we do not have enough evidence to support
there is a statistically significant dependence between driver class and whether officers were
more or less likely to solicit a bribe from drivers")
}
source("~/Documents/GitHub/StatsI_Fall2023/problemSets/PS02/my_answers/P02.R", echo=TRUE)
source("~/Documents/GitHub/StatsI_Fall2023/problemSets/PS02/my_answers/P02.R", echo=TRUE)
residuals_for_cell<-(resulting_data - calculate_expected_freq(resulting_data))/sqrt(calculate_expected_freq(resulting_data))
residuals_for_cell
##Question 2##
## Q2-a ##
#load the subset data from West Bengal
data<-read.csv("https://raw.githubusercontent.com/kosukeimai/qss/master/PREDICTION/women.csv")
View(data)
typeof(data)
typeof(data[reserved])
typeof(data["reserved"])
data["reserved"
data["reserved"]
data_types <- sapply(data, class)
reserved<-as.factor(data$reserved)
typeof(reserved)
reserved_data<-as.factor(data$reserved)
typeof(reserved_data)
reserved_data<-as.factor(data$reserved)
bivariate_reg<-lm(data$water ~ reserved_data,data=data)
summary(bivariate_reg)
plot(reserved_data,data$water,"The scatter plot between reservation policy and water in R",
xlab="water",ylab="reserved")
plot(data$water,reserved_data,"The scatter plot between reservation policy and water in R",
xlab="reserved",ylab="water")
plot(reserved_data,data$water,"The scatter plot between reservation policy and water in R",
xlab="water",ylab="reserved")
source("~/Documents/GitHub/StatsI_Fall2023/tutorials/05/05_tutorial_HR.R", echo=TRUE)
source("~/Documents/GitHub/StatsI_Fall2023/problemSets/PS02/my_answers/P02.R", echo=TRUE)
source("~/Documents/GitHub/StatsI_Fall2023/problemSets/PS02/my_answers/P02.R", echo=TRUE)
